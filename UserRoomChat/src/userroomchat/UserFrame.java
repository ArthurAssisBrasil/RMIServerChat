/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userroomchat;

import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import remoto.IServerRoomChat;
import javax.swing.JOptionPane;
import remoto.IRoomChat;
import remoto.IUserChat;

/**
 *
 * @author Arthur
 */
public class UserFrame extends javax.swing.JFrame {

    public TreeMap<String, IRoomChat> roomList;
    public IServerRoomChat iServer;
    public IUserChat iUsr;
    public UserChat usr;
    static Registry registry;
    public String IPServer;
    public String usrChat;
    IRoomChat room = null;

    public UserFrame(TreeMap<String, IRoomChat> roomList, IServerRoomChat iServer, String IPServer) throws RemoteException, AlreadyBoundException {
        this.usr = new UserChat();
        this.iUsr = usr;
        this.roomList = roomList;
        this.iServer = iServer;
        this.IPServer = IPServer;
        initComponents();
        this.setTitle(usr.usrName);
        if (roomList != null) {
            for (String roomNames1 : roomList.keySet()) { // adiciono a lista de salas para o jComboBox
                listaSalas.addItem(roomNames1);
            }
        }
    }

    public UserFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listaSalas = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        userJoinButton = new javax.swing.JButton();
        userCreateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        newMsg = new javax.swing.JTextArea();
        usrSend = new javax.swing.JButton();
        userLeaveButton = new javax.swing.JButton();
        userAtualizaButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        buffer = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Lista de Salas");

        userJoinButton.setText("Join");
        userJoinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userJoin(evt);
            }
        });

        userCreateButton.setText("Create Room");
        userCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userCreateRoom(evt);
            }
        });

        chat.setEditable(false);
        chat.setColumns(20);
        chat.setRows(5);
        jScrollPane1.setViewportView(chat);

        jLabel2.setText("Chat");

        newMsg.setColumns(20);
        newMsg.setRows(5);
        jScrollPane2.setViewportView(newMsg);

        usrSend.setText("Send");
        usrSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userSend(evt);
            }
        });

        userLeaveButton.setText("Leave");
        userLeaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userLeave(evt);
            }
        });

        userAtualizaButton.setText("Atualiza");
        userAtualizaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userAtualiza(evt);
            }
        });

        buffer.setEditable(false);
        buffer.setColumns(20);
        buffer.setRows(5);
        jScrollPane3.setViewportView(buffer);

        jLabel3.setText("Buffer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(usrSend)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(127, 127, 127)
                                        .addComponent(jLabel1)
                                        .addGap(194, 194, 194))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(listaSalas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(userAtualizaButton, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))
                                        .addGap(47, 47, 47)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(userLeaveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(userCreateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(userJoinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(12, 12, 12))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(129, 129, 129))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaSalas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userAtualizaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(userLeaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userJoinButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userCreateButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(usrSend)
                        .addGap(26, 26, 26))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userJoin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userJoin
        if (roomList.size() > 0) {
            Registry registry = null;
            try {
                registry = LocateRegistry.getRegistry(2020);
                if (room != null) {
                    room.leaveRoom((String) usr.usrName);
                    usr.userList = null;
                    room = null;
                    usr.ID = null;
                    usr.clockMatrix = new Integer[20][20];
                }
                this.room = (IRoomChat) registry.lookup((String) listaSalas.getSelectedItem());
                usr.ID = room.joinRoom((String) usr.usrName, iUsr);
                for (int i = 0; i < usr.clockMatrix.length; i++) {
                    /*if (i == usr.ID) {
                        usr.clockMatrix[usr.ID][i] = 1;
                    } else {*/
                    usr.clockMatrix[usr.ID][i] = 0;
                    //}
                }
                if (!usr.userList.firstKey().equals(usr.usrName)) {
                    usr.clockMatrix[usr.ID] = usr.userList.get(usr.userList.firstKey()).getClockVector();
                } else {
                    usr.clockMatrix[usr.ID] = usr.userList.get(usr.userList.lastKey()).getClockVector();
                }
                System.out.println("ID: " + usr.ID);
                System.out.println("Entrou USER: " + usr.usrName + " - Na sala: " + (String) listaSalas.getSelectedItem());
            } catch (RemoteException | NotBoundException ex) {
                Logger.getLogger(UserFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setTitle(usr.usrName + " - Sala: " + (String) listaSalas.getSelectedItem());
        }
        try {
            atualiza();
        } catch (RemoteException ex) {
            Logger.getLogger(UserFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_userJoin

    private void userCreateRoom(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userCreateRoom
        String roomName = JOptionPane.showInputDialog("Qual o nome da nova sala?");
        Registry registry = null;
        try {
            registry = LocateRegistry.getRegistry(2020);
            iServer.createRoom(roomName);
            roomList.put(roomName, room);
            atualiza();

        } catch (RemoteException ex) {
            Logger.getLogger(UserFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_userCreateRoom

    private void userSend(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userSend
        if (room != null) {
            int resposta = JOptionPane.showConfirmDialog(null, "Você deseja enviar a mensagem a todos os usuários?");
            if (resposta == JOptionPane.YES_OPTION) {
                Set<String> lista = usr.userList.keySet();
                try {
                    for (String nome : lista) {
                        if (!nome.equals(usr.usrName)) {
                            usr.userList.get(nome).deliverMsg(usr.usrName, newMsg.getText(), usr.ID, usr.clockMatrix[usr.ID]);
                        }
                    }
                    usr.userList.get(usr.usrName).deliverMsg(usr.usrName, newMsg.getText(), usr.ID, usr.clockMatrix[usr.ID]);
                    atualiza();
                } catch (RemoteException ex) {
                    Logger.getLogger(UserFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                String atrasado = JOptionPane.showInputDialog("Quem receberá a mensagem atrasada?");
                Set<String> lista = usr.userList.keySet();
                try {
                    for (String nome : lista) {
                        if (!nome.equals(usr.usrName) && !nome.equals(atrasado)) {
                            usr.userList.get(nome).deliverMsg(usr.usrName, newMsg.getText(), usr.ID, usr.clockMatrix[usr.ID]);
                        }
                    }
                    if (usr.userList.get(atrasado) != null) {
                        try {
                            Thread.sleep(30000);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        usr.userList.get(atrasado).deliverMsg(usr.usrName, newMsg.getText(), usr.ID, usr.clockMatrix[usr.ID]);
                    }
                    usr.userList.get(usr.usrName).deliverMsg(usr.usrName, newMsg.getText(), usr.ID, usr.clockMatrix[usr.ID]);
                    atualiza();
                } catch (RemoteException ex) {
                    Logger.getLogger(UserFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            newMsg.setText(null);
        }
    }//GEN-LAST:event_userSend

    private void userLeave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userLeave
        if (room != null) {
            Registry registry = null;
            try {
                registry = LocateRegistry.getRegistry(2020);
                //this.room = (IRoomChat) registry.lookup((String) listaSalas.getSelectedItem());
                room.leaveRoom((String) usr.usrName);
                usr.userList = null;
                room = null;
                usr.ID = null;
                usr.clockMatrix = new Integer[20][20];
                usr.buffer.removeAll(usr.buffer);
                atualiza();
            } catch (RemoteException ex) {
                Logger.getLogger(UserFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setTitle(usr.usrName);
        }
    }//GEN-LAST:event_userLeave

    private void userAtualiza(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userAtualiza
        try {
            atualiza();
        } catch (RemoteException ex) {
            Logger.getLogger(UserFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_userAtualiza

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UserFrame().setVisible(true);

            }
        });
    }

    public void deliverToGUI(String senderUsrName, String msg) {
        chat.insert(senderUsrName + ": " + msg + "\n", 0);
        this.buffer.setText("");
        for (int i = 0; i < usr.buffer.size(); i++) {
            this.buffer.insert(usr.buffer.get(i).senderName + ": " + usr.buffer.get(i).msg + "\n", 0);
        }

    }

    public void atualiza() throws RemoteException {
        listaSalas.removeAllItems();
        roomList = iServer.getRooms();
        Set set = roomList.entrySet();
        // Get an iterator
        Iterator i = set.iterator();
        // Display elements
        while (i.hasNext()) {
            Map.Entry sala = (Map.Entry) i.next();
            listaSalas.addItem(sala.getKey().toString());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea buffer;
    private javax.swing.JTextArea chat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> listaSalas;
    private javax.swing.JTextArea newMsg;
    private javax.swing.JButton userAtualizaButton;
    private javax.swing.JButton userCreateButton;
    private javax.swing.JButton userJoinButton;
    private javax.swing.JButton userLeaveButton;
    private javax.swing.JButton usrSend;
    // End of variables declaration//GEN-END:variables
}
